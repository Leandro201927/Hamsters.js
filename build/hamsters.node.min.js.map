{"version":3,"sources":["webpack:///webpack/bootstrap 76434f74b94a97111be1","webpack:///./hamsters.js","webpack:///./core/version.js","webpack:///./core/habitat.js","webpack:///./core/wheel.js","webpack:///./core/pool.js","webpack:///./core/data.js","webpack:///./core/logger.js","webpack:///./core/memoizer.js"],"names":["hamstersjs","version","init","initializeLibrary","habitat","data","pool","logger","memoizer","scheduleTask","run","hamstersRun","bind","promise","hamstersPromise","habitatKeys","startOptions","processStartOptions","legacy","persistence","spawnHamsters","maxThreads","info","Object","keys","key","indexOf","toLowerCase","params","functionToRun","hamstersJob","prepareJob","id","tasks","length","count","threads","aggregate","output","workers","memoize","dataType","input","task","resolve","reject","then","results","catch","error","messsage","Promise","hamstersTask","onSuccess","onError","hamsters","module","exports","majorVersion","minorVersion","patchVersion","hamstersVersion","debug","importScripts","isLegacyEnvironment","legacyWheel","browser","isBrowser","webWorker","isWebWorker","node","isNode","reactNative","isReactNative","shell","isShell","transferable","supportstransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isIE10","isInternetExplorer","Worker","locateWorkerObject","sharedWorker","locateSharedWorkerObject","hamsterWheel","selectHamsterWheel","locateBlobBuilder","determineGlobalThreads","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","SharedWorker","window","RegExp","isNaN","test","process","global","isLegacy","supportsSharedWorkers","supports","workerBlob","generateWorkerBlob","SharedHamster","e","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","textContent","Blob","BlobMaker","blob","append","type","getBlob","workerLogic","URL","createObjectURL","createDataBlob","String","Uint8Array","SharedArrayBuffer","Proxy","regular","hamstersHabitat","wheel","worker","workerScaffold","regularScaffold","legacyScaffold","self","rtn","addEventListener","incomingConnection","port","ports","start","incomingMessage","eval","postMessage","preparedTransfer","onmessage","message","putHamsterToWork","Function","returnResponse","typedArrayFromBuffer","prepareTransferBuffers","buffer","types","Uint32Array","Uint16Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","buffers","forEach","item","push","Array","isArray","ArrayBuffer","hamstersWheel","running","pending","fetchHamster","grabHamster","array","arguments","hamster","runTask","threadId","spawnHamster","parentPort","threadArray","hamsterFood","hasOwnProperty","prepareMeal","registerTask","keepTrackOfThread","trainHamster","feedHamster","addWorkToPending","getOutput","sort","sortOutput","splice","onThreadResponse","console","log","removeFromRunning","JSON","parse","returnOutputAndRemoveTask","processQueue","shift","terminate","onThreadError","errorFromThread","onmessageerror","onerror","threadArrays","splitArrays","i","hamsterPool","randomArray","aggregateArrays","aggregateThreadOutputs","splitArrayIntoSubArrays","processDataType","sortArray","prepareOutput","prepareFunction","messageWorker","stringify","ie10","hamstersFood","newBuffer","functionBody","functionString","substring","arr","order","prototype","call","a","b","reverse","Math","round","random","reduce","concat","len","bufferLength","offset","set","n","size","ceil","slice","subarray","hamstersData","logBook","warning","infoLog","warningLog","errorLog","saveLogEntry","saveToLogBook","getLogEntries","fetchLogBook","createAndSaveStampedMessage","generateTimeStampedMessage","searchLogEntries","searchLogBook","timeStampedMessage","warn","record","Date","now","errorMessage","lineno","filename","eventType","logBookEntries","searchString","searchResults","eventTypeResults","tmpEntries","findStringInLogBook","finalResults","findStringInLogBookAllTypes","total","hamstersLogger","maxCacheEntries","cacheEntries","itemCached","isItemCached","fetchItem","fetchItemFromCache","saveItem","saveItemToCache","method","fn","cacheItem","cachedResult","itemToCache","cachedItems","hamstersMemoizer"],"mappings":"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","file":"hamsters.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 76434f74b94a97111be1","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersVersion from './core/version';\nimport hamstersHabitat from './core/habitat';\nimport hamstersPool from './core/pool';\nimport hamstersData from './core/data';\nimport hamstersLogger from './core/logger';\nimport hamstersMemoizer from './core/memoizer';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.version = hamstersVersion;\n    this.init = this.initializeLibrary;\n    this.habitat = hamstersHabitat;\n    this.data = hamstersData;\n    this.pool = hamstersPool;\n    this.logger = hamstersLogger;\n    this.memoizer = hamstersMemoizer;\n    this.scheduleTask = this.scheduleTask;\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.habitatKeys = [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxThreads', 'parentPort',\n      'webworker',\n    ];\n  }\n\n  /**\n  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.processStartOptions(startOptions);\n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      hamstersPool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n    hamstersLogger.info(`Initialized using up to ${this.habitat.maxThreads} threads.`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (var key of Object.keys(startOptions)) {\n        if (this.habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    if(typeof this.habitat['Worker'] === 'function') {\n      this.habitat.legacy = false;\n    }\n  }\n\n  /**\n  * @constructor\n  * @function hamstersTask - Constructs a new task object from provided arguments\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {object} new Hamsters.js task\n  */\n  hamstersTask(params, functionToRun) {\n    params.hamstersJob = (this.habitat.legacy ? functionToRun : this.data.prepareJob(functionToRun));\n    return {\n      id: this.pool.tasks.length,\n      count: 0,\n      threads: (this.habitat.legacy ? 1 : (params.threads || 1)),\n      aggregate: (params.aggregate || false),\n      output: [],\n      workers: [],\n      memoize: (params.memoize || false),\n      dataType: (params.dataType ? params.dataType.toLowerCase() : null),\n      input: params\n    };\n  }\n\n  scheduleTask(task, resolve, reject) {\n    this.pool.scheduleTask(task).then((results) => {\n      return resolve(results);\n    }).catch((error) => {\n      return this.logger.error(error.messsage, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersPromise - Calls library functionality using async promises\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {array} Results from functionToRun.\n  */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(this.hamstersTask(params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {function} onSuccess - Function to call upon successful execution\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(this.hamstersTask(params, functionToRun), onSuccess, onError);\n  }\n}\n\nvar hamsters = new hamstersjs();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsters;\n}\n\n\n// WEBPACK FOOTER //\n// ./hamsters.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nconst majorVersion = 5;\nconst minorVersion = 3;\nconst patchVersion = 1;\nconst hamstersVersion = `${majorVersion}.${minorVersion}.${patchVersion}`;\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersVersion;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/version.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersWheel from './wheel';\n\nclass habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.debug = false;\n    this.importScripts = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.legacy = this.isLegacyEnvironment();\n    this.legacyWheel = hamstersWheel.legacy;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportstransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE10 = !this.isNode() && !this.isReactNative() && this.isInternetExplorer(10);\n    this.Worker = this.locateWorkerObject();\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.hamsterWheel = this.selectHamsterWheel();\n    this.locateBlobBuilder = this.locateBlobBuilder;\n    this.maxThreads = this.determineGlobalThreads();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && !this.shell) {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFireox - Detect firefox browser\n  */\n  isFirefox() {\n    return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer(version) {\n    return (new RegExp('msie' + (!isNaN(version) ? ('\\\\s'+version) : ''), 'i').test(navigator.userAgent));\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a webworker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\");\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is reactNative\n  */\n  isReactNative() {\n    return (!this.isNode() && typeof global === 'object' && !this.browser);\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return (this.browser && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = this.generateWorkerBlob(selectHamsterWheel());\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n  */\n  locateBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return  URL.createObjectURL(this.createDataBlob('(' + String(workerLogic) + ')();'));\n  }\n\n  /**\n  * @function supportstransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportstransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.isIE10) {\n      return '../common/hamstersWheel.js';\n    }\n    if(this.reactNative) {\n      return '../common/reactNative.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return this.generateWorkerBlob(hamstersWheel.regular);\n  }\n}\n\nvar hamstersHabitat = new habitat();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersHabitat;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/habitat.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\n\nclass wheel {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.worker = this.workerScaffold;\n    this.regular = this.regularScaffold;\n    this.legacy = this.legacyScaffold;\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n  */\n  workerScaffold() {\n    self.params = {};\n    self.rtn = {};\n\n    addEventListener('connect', (incomingConnection) => {\n      const port = incomingConnection.ports[0];\n      port.start();\n      port.addEventListener('message', (incomingMessage) => {\n        params = incomingMessage.data;\n        rtn = {\n          data: [],\n          dataType: params.dataType\n        };\n        eval(\"(\" + params.hamstersJob + \")\")();\n        port.postMessage(rtn);\n      }, false);\n    }, false);\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality\n  */\n  regularScaffold() {\n    self.params = {};\n    self.rtn = {};\n    self.preparedTransfer = {};\n    self.onmessage = function(message) {\n      params = message.data;\n      rtn = {\n        data: [],\n        dataType: (typeof params.dataType !== 'undefined' ? params.dataType : null)\n      };\n      putHamsterToWork();\n    }\n\n    var putHamsterToWork = function() {\n      new Function(params.hamstersJob)();\n      returnResponse(rtn);\n    }\n\n    var returnResponse = function(rtn) {\n      if(rtn.dataType) {\n        rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n        prepareTransferBuffers(rtn, []);\n      } else {\n        return postMessage(rtn);\n      }\n    }\n\n    var typedArrayFromBuffer = function(dataType, buffer) {\n      const types = {\n        'Uint32': Uint32Array,\n        'Uint16': Uint16Array,\n        'Uint8': Uint8Array,\n        'Uint8clamped': Uint8ClampedArray,\n        'Int32': Int32Array,\n        'Int16': Int16Array,\n        'Int8': Int8Array,\n        'Float32': Float32Array,\n        'Float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n\n    var prepareTransferBuffers = function(rtn, buffers) {\n      Object.keys(rtn).forEach(function(key) {\n        var item = rtn[key];\n        if(typeof item.buffer !== 'undefined') {\n          buffers.push(item.buffer);\n        } else {\n          if(Array.isArray(rtn[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(rtn[key]));\n          }\n        }\n      });\n      return postMessage(rtn, buffers);\n    }\n  }\n\n\n\n  /**\n  * @function legacyScaffold - Provides library functionality for legacy devices\n  */\n  legacyScaffold(params, resolve) {\n    var rtn = {\n      data: [],\n      dataType: (params['dataType'] || null)\n    };\n    params.hamstersJob(params, rtn);\n    resolve(rtn);\n  }\n\n};\n\nvar hamstersWheel = new wheel();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersWheel;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/wheel.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\nclass pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.tasks = [];\n\t  this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.grabHamster;\n  }\n\n  /**\n  * @function grabHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n  \tthis.pending.push(arguments);\n  }\n\n  /**\n  * @function grabHamster - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueue(item, hamster) {\n  \treturn this.runTask(hamster, item[0], item[1], item[2], item[3], item[4]);\n  }\n\n  /**\n  * @function grabHamster - Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  grabHamster(threadId) {\n    if(hamstersHabitat.persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    task.workers.push(id); //Keep track of threads scoped to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function registerTask - Adds task to execution pool based on id\n  * @param {number} id - Id of task to register\n  */\n  registerTask(id) {\n    this.tasks.push(id);\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} WebWorker - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    if (hamstersHabitat.webWorker) {\n      return new hamstersHabitat.SharedWorker(hamstersHabitat.hamsterWheel, 'SharedHamsterWheel');\n    }\n    if(hamstersHabitat.node && typeof hamstersHabitat.parentPort !== 'undefined') {\n      return new hamstersHabitat.Worker(hamstersHabitat.hamsterWheel);\n    }\n    return new hamstersHabitat.Worker(hamstersHabitat.hamsterWheel);\n  }\n\n  /**\n  * @function prepareMeal - Prepares message to send to a thread and invoke execution\n  * @param {object} threadArray - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @return {object} hamsterFood - Prepared message to send to a thread\n  */\n  prepareMeal(threadArray, task) {\n    let hamsterFood = {\n    \tarray: threadArray\n    };\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) === -1) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, array, task, resolve, reject) {\n  \tlet threadId = this.running.length;\n    let hamsterFood = this.prepareMeal(array, task);\n    this.registerTask(task.id);\n    this.keepTrackOfThread(task, threadId);\n    if(hamstersHabitat.legacy) {\n      hamstersHabitat.legacyWheel(hamsterFood, resolve, reject);\n    } else {\n      this.trainHamster(this, task.count, task, hamster, resolve, reject);\n      hamstersData.feedHamster(hamster, hamsterFood);\n    }\n    task.count += 1; //Increment count, thread is running\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(array, task, resolve, reject) {\n    if(hamstersHabitat.maxThreads === this.running.length) {\n      return this.addWorkToPending(array, task, resolve, reject);\n    }\n    let hamster = this.grabHamster(this.running.length);\n    return this.runTask(hamster, array, task, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    let output = hamstersData.getOutput(task, hamstersHabitat.transferable);\n    if (task.sort) {\n      output = hamstersData.sortOutput(output, task.sort);\n    }\n    resolve({\n      data: output\n    });\n    this.tasks[task.id] = null; //Clean up our task, not needed any longer\n  }\n\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1); //Remove thread from running pool\n    task.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(pool, threadId, task, hamster, resolve, reject) {\n    // Handle successful response from a thread\n    let onThreadResponse = function(message) {\n      console.log(\"WE HAVE A RESPONSE!! \", message);\n      pool.removeFromRunning(task, threadId);\n      task.output[threadId] = (hamstersHabitat.reactNative ? JSON.parse(message.data.data) : message.data.data);\n      if (task.workers.length === 0 && task.count === task.threads) {\n        pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (pool.pending.length !== 0) {\n        return pool.processQueue(pool.pending.shift(), hamster);\n      }\n      if (!hamstersHabitat.persistence && !hamstersHabitat.webWorker) {\n        hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    }\n    // Handle error response from a thread\n    let onThreadError = function(error) {\n      hamstersLogger.errorFromThread(error, reject);\n    }\n    // Register on message/error handlers\n    if (hamstersHabitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = onThreadError;\n      hamster.port.onerror = onThreadError;\n    } else if(hamstersHabitat.node) {\n      console.log(\"ITS NODE!! \", hamster.parentPort, hamstersHabitat.parentPort);\n      hamster.parentPort.onmessage = onThreadResponse;\n      hamstersHabitat.parentPort.onmessageerror = onThreadError;\n      hamstersHabitat.onerror = onThreadError;\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = onThreadError;\n      hamster.onerror = onThreadError;\n    }\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task) {\n  \treturn new Promise((resolve, reject) => {\n      let threadArrays = [];\n      if(task.input.array && task.threads !== 1) {\n        threadArrays = hamstersData.splitArrays(task.input.array, task.threads); //Divide our array into equal array sizes\n      }\n      let i = 0;\n      while (i < task.threads) {\n      \tif(threadArrays && task.threads !== 1) {\n        \tthis.hamsterWheel(threadArrays[i], task, resolve, reject);\n\t\t    } else {\n        \tthis.hamsterWheel(task.input.array, task, resolve, reject);\n\t\t    }\n        i += 1;\n      }\n    });\n  }\n}\n\nvar hamsterPool = new pool();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsterPool;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/pool.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\nclass data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.randomArray = this.randomArray;\n    this.aggregateArrays = this.aggregateThreadOutputs;\n    this.splitArrays = this.splitArrayIntoSubArrays;\n    this.processDataType = this.processDataType;\n    this.sortOutput = this.sortArray;\n    this.getOutput = this.prepareOutput;\n    this.prepareJob = this.prepareFunction;\n    this.feedHamster = this.messageWorker;\n  }\n\n  /**\n  * @function messageWorker - Prepares message to send to thread\n  * @param {worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorker(hamster, hamsterFood) {\n    if(hamstersHabitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (hamstersHabitat.ie10) {\n      return hamster.postMessage(hamsterFood);\n    }\n    if (hamstersHabitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    if(hamstersHabitat.node) {\n      return hamster.parentPort.postMessage(hamstersFood);\n    }\n    let preparedTransfer = this.prepareTransferBuffers(hamsterFood);\n    return hamster.postMessage(preparedTransfer['hamsterFood'], preparedTransfer['buffers']);\n  }\n\n  /**\n  * @function prepareTransferBuffers - Prepares transferable buffers for faster message passing\n  * @param {object} hamsterFood - Message to send to thread\n  */\n  prepareTransferBuffers(hamsterFood, transferable) {\n    let buffers = [];\n    let key, newBuffer;\n    if(hamstersHabitat.transferable) {\n      for (key of Object.keys(hamsterFood)) {\n        newBuffer = null;\n        if(hamsterFood[key].buffer) {\n          newBuffer = hamsterFood[key].buffer;\n        } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n          newBuffer = new ArrayBuffer(hamsterFood[key]);\n        }\n        if(newBuffer) {\n          buffers.push(newBuffer);\n          hamsterFood[key] = newBuffer;\n        }\n      }\n    }\n    return {\n      hamsterFood: hamsterFood,\n      buffers: buffers\n    };\n  }\n\n  /**\n  * @function prepareFunction - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareFunction(functionBody) {\n    if(hamstersHabitat.webWorker) {\n      return functionBody;\n    }\n    let functionString = String(functionBody);\n    return functionString.substring((functionString.indexOf(\"{\") + 1), (functionString.length -1));\n  }\n\n  /**\n  * @function processDataType - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  processDataType(dataType, buffer, transferable) {\n    if(transferable) {\n      return this.typedArrayFromBuffer(dataType, buffer);\n    }\n    return buffer;\n  }\n\n  /**\n  * @function prepareOutput - Prepares final task output\n  * @param {task} buffer - Task to prepare output for\n  */\n  prepareOutput(task, transferable) {\n    if(task.threads === 1) {\n      return task.output[0];\n    }\n    if(task.aggregate) {\n      return this.aggregateThreadOutputs(task.output, task.dataType, transferable);\n    }\n  }\n\n  /**\n  * @function sortArray - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortArray(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return dataType;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function randomArray - Creates new random array\n  * @param {number} count - Number of random elements in array\n  * @param {function} onSuccess - onSuccess callback\n  */\n  randomArray(count, onSuccess) {\n    var randomArray = [];\n    while(count > 0) {\n      randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n      count -= 1;\n    }\n    onSuccess(randomArray);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType, transferable) {\n    if(!dataType || !transferable) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength, transferable);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function splitArrayIntoSubArrays - Splits a single array into multiple equal sized subarrays\n  * @param {array} array - Array to split\n  * @param {number} n - Number of subarrays to create\n  */\n  splitArrayIntoSubArrays(array, n) {\n    let i = 0;\n    let threadArrays = [];\n    let size = Math.ceil(array.length/n);\n    if(array.slice) {\n      while(i < array.length) {\n        threadArrays.push(array.slice(i, i += size));\n      }\n    } else {\n      while (i < array.length) {\n        threadArrays.push(array.subarray(i, i += size));\n      }\n    }\n    return threadArrays;\n  }\n}\n\nvar hamstersData = new data();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersData;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/data.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nimport hamstersVersion from './version';\n\nclass logger {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.logBook = {\n      error: [], \n      warning: [], \n      info: []\n    };\n    this.info = this.infoLog;\n    this.warning = this.warningLog;\n    this.error = this.errorLog;\n    this.errorFromThread = this.errorFromThread;\n    this.saveLogEntry = this.saveToLogBook;\n    this.getLogEntries = this.fetchLogBook;\n    this.createAndSaveStampedMessage = this.generateTimeStampedMessage;\n    this.searchLogEntries = this.searchLogBook;\n  }\n\n  infoLog(message) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Info', message);\n    console.info(timeStampedMessage);\n  }\n\n  warningLog(message) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Warning', message);\n    console.warn(timeStampedMessage);\n  }\n\n  errorLog(message, reject) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Error', message);\n    console.error(timeStampedMessage);\n    if(reject) {\n      reject(timeStampedMessage);\n    } else {\n      return timeStampedMessage;\n    }\n  }\n\n  generateTimeStampedMessage(type, message) {\n    let record = `Hamsters.js v${hamstersVersion} ${type}: ${message} @ ${Date.now()}`\n    this.saveLogEntry(type.toLowerCase(), record);\n    return record;\n  }\n\n  errorFromThread(error, reject) {\n    let errorMessage = `#${error.lineno} in ${error.filename}: ${error.message}`;\n    this.errorLog(errorMessage, reject);\n  }\n\n  saveToLogBook(eventType, message) {\n    this.logBook[eventType].push(message);\n  }\n\n  fetchLogBook(eventType) {\n    if(eventType) {\n      return this.logBook[eventType];\n    }\n    return this.logBook;\n  }\n\n  findStringInLogBook(logBookEntries, searchString) {\n    let searchResults = [];\n    let i = 0;\n    for (i; i < logBookEntries.length; i++) {\n      if(logBookEntries[i].indexOf(searchString) !== -1) {\n        searchResults.push(logBookEntries[i]);\n      }\n    }\n    return searchResults;\n  }\n\n  findStringInLogBookAllTypes(logBook, searchString) {\n    let searchResults = [];\n    let key, eventTypeResults, tmpEntries = null;\n    for(key in logBook) {\n      if(logBook.hasOwnProperty(key)) {\n        tmpEntries = logBook[key];\n        eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n        for (var i = eventTypeResults.length - 1; i >= 0; i--) {\n          searchResults.push(eventTypeResults[i])\n        }\n      }\n    }\n    return searchResults;\n  }\n\n  searchLogBook(searchString, eventType) {\n    let finalResults = [];\n    if(eventType) {\n      finalResults = this.findStringInLogBook(this.logBook[eventType], searchString);\n    } else {\n      finalResults = this.findStringInLogBookAllTypes(this.logBook, searchString);\n    }\n    return {\n      total: finalResults.length,\n      results: finalResults\n    };\n  }   \n}\n\nvar hamstersLogger = new logger();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersLogger;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/logger.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass memoizer {\n  \n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.maxCacheEntries = 25;\n    this.cacheEntries = [];\n    this.itemCached = this.isItemCached;\n    this.fetchItem = this.fetchItemFromCache;\n    this.saveItem = this.saveItemToCache;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {object} input - Provided library execution options\n  * @param {method} functionToRun - Function to execute\n  * @return {object} Execution results from cache, or false\n  */\n  isItemCached(input, method) {\n  \treturn !!(this.fetchItem({fn: method, data: input})) || false;\n  }\n\n  /**\n  * @function fetchItemFromCache - Fetches cache item from cache\n  * @param {object} cacheItem - Cache item to fetch\n  * @return {object} CacheResults, or false\n  */\n  fetchItemFromCache(cacheItem) {\n  \tlet cachedResult = null;\n    let key = null;\n    for(key of Object.keys(this.cacheEntries)) {\n      if((cacheItem[key].fn === cacheItem.fn) && (cacheItem[key].input === cacheItem.data)) {\n        cachedResult = cacheItem[key].input;\n      }\n    }\n  \treturn cachedResult || false;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {method} functionToRun - Function to execute\n  * @param {object} data - Execution results to cache\n  */\n  saveItemToCache(method, data, maxCacheEntries) {\n  \tlet itemToCache = {\n  \t\tfn: method,\n  \t\tinput: data\n  \t};\n  \tlet cachedItems = this.cacheEntries;\n  \tif(cachedItems.length < maxCacheEntries) {\n  \t\tcachedItems.push(itemToCache);\n  \t} else {\n  \t\tcachedItems.splice(0, 0, itemToCache); \n  \t}\n  \tthis.cacheEntries = cachedItems;\n  }\n}\n\nvar hamstersMemoizer = new memoizer();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersMemoizer;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/memoizer.js"],"sourceRoot":""}